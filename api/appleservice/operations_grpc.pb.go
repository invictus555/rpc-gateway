// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: operations.proto

package appleservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppleServiceClient is the client API for AppleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppleServiceClient interface {
	DescribeApple(ctx context.Context, in *DescribeAppleRequest, opts ...grpc.CallOption) (*Apple, error)
	CreateApple(ctx context.Context, in *CreateAppleRequest, opts ...grpc.CallOption) (*Apple, error)
	UpdateApple(ctx context.Context, in *UpdateAppleRequest, opts ...grpc.CallOption) (*Apple, error)
	ModifyApple(ctx context.Context, in *ModifyAppleRequest, opts ...grpc.CallOption) (*Apple, error)
	DestroyApple(ctx context.Context, in *DestroyAppleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type appleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppleServiceClient(cc grpc.ClientConnInterface) AppleServiceClient {
	return &appleServiceClient{cc}
}

func (c *appleServiceClient) DescribeApple(ctx context.Context, in *DescribeAppleRequest, opts ...grpc.CallOption) (*Apple, error) {
	out := new(Apple)
	err := c.cc.Invoke(ctx, "/appleservice.AppleService/DescribeApple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appleServiceClient) CreateApple(ctx context.Context, in *CreateAppleRequest, opts ...grpc.CallOption) (*Apple, error) {
	out := new(Apple)
	err := c.cc.Invoke(ctx, "/appleservice.AppleService/CreateApple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appleServiceClient) UpdateApple(ctx context.Context, in *UpdateAppleRequest, opts ...grpc.CallOption) (*Apple, error) {
	out := new(Apple)
	err := c.cc.Invoke(ctx, "/appleservice.AppleService/UpdateApple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appleServiceClient) ModifyApple(ctx context.Context, in *ModifyAppleRequest, opts ...grpc.CallOption) (*Apple, error) {
	out := new(Apple)
	err := c.cc.Invoke(ctx, "/appleservice.AppleService/ModifyApple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appleServiceClient) DestroyApple(ctx context.Context, in *DestroyAppleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/appleservice.AppleService/DestroyApple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppleServiceServer is the server API for AppleService service.
// All implementations must embed UnimplementedAppleServiceServer
// for forward compatibility
type AppleServiceServer interface {
	DescribeApple(context.Context, *DescribeAppleRequest) (*Apple, error)
	CreateApple(context.Context, *CreateAppleRequest) (*Apple, error)
	UpdateApple(context.Context, *UpdateAppleRequest) (*Apple, error)
	ModifyApple(context.Context, *ModifyAppleRequest) (*Apple, error)
	DestroyApple(context.Context, *DestroyAppleRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAppleServiceServer()
}

// UnimplementedAppleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppleServiceServer struct {
}

func (UnimplementedAppleServiceServer) DescribeApple(context.Context, *DescribeAppleRequest) (*Apple, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeApple not implemented")
}
func (UnimplementedAppleServiceServer) CreateApple(context.Context, *CreateAppleRequest) (*Apple, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApple not implemented")
}
func (UnimplementedAppleServiceServer) UpdateApple(context.Context, *UpdateAppleRequest) (*Apple, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApple not implemented")
}
func (UnimplementedAppleServiceServer) ModifyApple(context.Context, *ModifyAppleRequest) (*Apple, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyApple not implemented")
}
func (UnimplementedAppleServiceServer) DestroyApple(context.Context, *DestroyAppleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyApple not implemented")
}
func (UnimplementedAppleServiceServer) mustEmbedUnimplementedAppleServiceServer() {}

// UnsafeAppleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppleServiceServer will
// result in compilation errors.
type UnsafeAppleServiceServer interface {
	mustEmbedUnimplementedAppleServiceServer()
}

func RegisterAppleServiceServer(s grpc.ServiceRegistrar, srv AppleServiceServer) {
	s.RegisterService(&AppleService_ServiceDesc, srv)
}

func _AppleService_DescribeApple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAppleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServiceServer).DescribeApple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appleservice.AppleService/DescribeApple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServiceServer).DescribeApple(ctx, req.(*DescribeAppleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppleService_CreateApple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServiceServer).CreateApple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appleservice.AppleService/CreateApple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServiceServer).CreateApple(ctx, req.(*CreateAppleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppleService_UpdateApple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServiceServer).UpdateApple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appleservice.AppleService/UpdateApple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServiceServer).UpdateApple(ctx, req.(*UpdateAppleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppleService_ModifyApple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyAppleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServiceServer).ModifyApple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appleservice.AppleService/ModifyApple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServiceServer).ModifyApple(ctx, req.(*ModifyAppleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppleService_DestroyApple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAppleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServiceServer).DestroyApple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appleservice.AppleService/DestroyApple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServiceServer).DestroyApple(ctx, req.(*DestroyAppleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppleService_ServiceDesc is the grpc.ServiceDesc for AppleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appleservice.AppleService",
	HandlerType: (*AppleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeApple",
			Handler:    _AppleService_DescribeApple_Handler,
		},
		{
			MethodName: "CreateApple",
			Handler:    _AppleService_CreateApple_Handler,
		},
		{
			MethodName: "UpdateApple",
			Handler:    _AppleService_UpdateApple_Handler,
		},
		{
			MethodName: "ModifyApple",
			Handler:    _AppleService_ModifyApple_Handler,
		},
		{
			MethodName: "DestroyApple",
			Handler:    _AppleService_DestroyApple_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operations.proto",
}
